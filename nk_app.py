import streamlit as st
import pandas as pd

def load_data():
    # Load the pre-existing dataset
    file_path = "data_enkn.xlsx"  # Ensure this file is in the same directory or adjust the path accordingly
    df = pd.read_csv(file_path)
    return df

def main():
    st.set_page_config(page_title="Namma Kisaan", layout="wide")
    
    st.title("üåæ Namma Kisaan - ‡≤®‡≤Æ‡≥ç‡≤Æ ‡≤ï‡≤ø‡≤∏‡≤æ‡≤®‡≥ç üåæ")
    
    # Sidebar for registration
    st.sidebar.header("üë§ Farmer Registration / ‡≤∞‡≥à‡≤§ ‡≤®‡≥ã‡≤Ç‡≤¶‡≤£‡≤ø")
    name = st.sidebar.text_input("Name / ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å")
    age = st.sidebar.number_input("Age / ‡≤µ‡≤Ø‡≤∏‡≥ç‡≤∏‡≥Å", min_value=18, max_value=100, step=1)
    aadhaar = st.sidebar.text_input("Aadhaar Number / ‡≤Ü‡≤¶‡≤æ‡≤∞‡≥ç ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü")
    owner_type = st.sidebar.radio("Ownership Type / ‡≤Æ‡≤æ‡≤≤‡≤ï‡≤§‡≥ç‡≤µ ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞", ["Owner / ‡≤Æ‡≤æ‡≤≤‡≥Ä‡≤ï", "Lessee / ‡≤¨‡≤æ‡≤°‡≤ø‡≤ó‡≥Ü"])
    location = st.sidebar.text_input("Location / ‡≤∏‡≥ç‡≤•‡≤≥")
    plot_size = st.sidebar.number_input("Plot Size (acres) / ‡≤™‡≥ç‡≤≤‡≤æ‡≤ü‡≥ç ‡≤ó‡≤æ‡≤§‡≥ç‡≤∞ (‡≤é‡≤ï‡≤∞‡≥Ü)", min_value=0.1, step=0.1)
    
    if st.sidebar.button("Register / ‡≤®‡≥ã‡≤Ç‡≤¶‡≤æ‡≤Ø‡≤ø‡≤∏‡≤ø"):
        st.sidebar.success(f"Registered {name} successfully! / {name} ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤®‡≥ã‡≤Ç‡≤¶‡≤æ‡≤Ø‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!")
        
        # Load dataset
        df = load_data()
        
        if location:
            filtered_df = df[df['Location'].str.contains(location, case=False, na=False)][['Soil type', 'Yeilds', 'Irrigation', 'Season', 'Crops']]
            if not filtered_df.empty:
                selected_entry = filtered_df.iloc[0]  # Select only one matching entry
                st.write("### üìä Information for Location / ‡≤∏‡≥ç‡≤•‡≤≥‡≤ï‡≥ç‡≤ï‡≤æ‡≤ó‡≤ø ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤ó‡≤≥‡≥Å")
                st.write(f"üü¢ **Soil Type / ‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤® ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞**: {selected_entry['Soil type']}")
                st.write(f"üåæ **Yield / ‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤â‡≤§‡≥ç‡≤™‡≤æ‡≤¶‡≤®‡≥Ü**: {selected_entry['Yeilds']}")
                st.write(f"üíß **Irrigation / ‡≤®‡≥Ä‡≤∞‡≤æ‡≤µ‡≤∞‡≤ø**: {selected_entry['Irrigation']}")
                st.write(f"üìÖ **Season / ‡≤ã‡≤§‡≥Å**: {selected_entry['Season']}")
                st.write(f"üå± **Crop / ‡≤¨‡≥Ü‡≤≥‡≥Ü**: {selected_entry['Crops']}")
            else:
                st.write("‚ùå No data available for the given location / ‡≤®‡≥Ä‡≤°‡≤ø‡≤¶ ‡≤∏‡≥ç‡≤•‡≤≥‡≤ï‡≥ç‡≤ï‡≤æ‡≤ó‡≤ø ‡≤°‡≥á‡≤ü‡≤æ ‡≤≤‡≤≠‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤")
        else:
            st.write("‚ö†Ô∏è Please enter a location to view data / ‡≤°‡≥á‡≤ü‡≤æ ‡≤µ‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤≤‡≥Å ‡≤∏‡≥ç‡≤•‡≤≥‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø")
        
        # User input for soil type and irrigation method
        st.write("### üåø Get Crop Recommendation / ‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø")
        soil_type_input = st.selectbox("Select Soil Type / ‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤® ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø", df['Soil type'].dropna().unique())
        irrigation_input = st.selectbox("Select Irrigation Method / ‡≤®‡≥Ä‡≤∞‡≤æ‡≤µ‡≤∞‡≤ø ‡≤µ‡≤ø‡≤ß‡≤æ‡≤®‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø", df['Irrigation'].dropna().unique())
        
        recommendation_df = df[(df['Soil type'] == soil_type_input) & (df['Irrigation'] == irrigation_input)][['Season', 'Crops']]
        if not recommendation_df.empty:
            recommended_entry = recommendation_df.iloc[0]
            st.write(f"üåæ **Recommended Season / ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø‡≤¶ ‡≤ã‡≤§‡≥Å**: {recommended_entry['Season']}")
            st.write(f"üå± **Recommended Crop / ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø‡≤¶ ‡≤¨‡≥Ü‡≤≥‡≥Ü**: {recommended_entry['Crops']}")
        else:
            st.write("‚ùå No recommendation available for the selected soil and irrigation / ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø‡≤¶ ‡≤Æ‡≤£‡≥ç‡≤£‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≥Ä‡≤∞‡≤æ‡≤µ‡≤∞‡≤ø‡≤ó‡≤æ‡≤ó‡≤ø ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å ‡≤≤‡≤≠‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤")
    
if __name__ == "__main__":
    main()
